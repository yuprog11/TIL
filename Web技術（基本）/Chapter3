HTTP　はHTMLをやり取りするときに使われるプロコトル

●そのHTTPにおいて↓
HTTPメッセージ　ブラウザとサーバーでやり取りするときに使う。どういうデータが欲しいのか伝えることができ、サーバーもメッセージを利用してブラウザの要求に答えれる。
●そのHTTPメッセージ中で、HTTPメッセージは2種類あり、ブラウザからの要求である「HTTPリクエスト」サーバーからの応答である「HTTPレスポンス」
基本的に1つのHTTPリクエストに対して1つのHTTPレスポンスを返す

「HTTPリクエスト」「HTTPレスポンス」構文
●HTTPリクエスト
「リクエスト行」　サーバーに対してどのような処理をして欲しいか、リクエストの要求内容の記述（中身の要約）　 1行、GET　/index.html HTTP/1.1
「メッセージヘッダー」ブラウザの種類、バージョン　対応データ形式（補足）　　　　　　　　　　　　　　　　　　　　　　　　             　　複数行、中身
                                                                            1行、空白メッセージヘッダーの終わりを示す
「メッセージボディ」webページのフォームに入力された内容をサーバーに送る目的                    複数行

●HTTPレスポンス
「ステータス行」受け取ったリクエストのサーバー内処理結果                                   1行、HTTP/1.1 200 OK
「メッセージヘッダー」サーバーの種類、送信するでーた形式（付加的情報）                         複数行　中身
                                                                            1行、空白
「メッセージボディ」ブラウザからリクエストされたHTML等のデータ格納                            複数行
HTMLデータを受け取ったブラウザは内容を解析し、その中に画像などのリンクが存在する場合、
再度サーバーへHTTPリクエストを送信する。
このリクエストとレスポンスのやり取りの繰り返しでサイトを閲覧することができる。

●そのHTTPリクエストの中で、具体的な要求内容「HTTPメソッド」
HTTPメソッドはその中でも目的別で複数定義されていて主に利用されるのは以下
「GET」 HTMLファイルなどのコンテンツを取得したい場合
「POST」  データをwebサーバーに対して送信する
他は確認系「OPTIONS」と制限されてること多い系
GETもPOSTのようにデータ送信にも使える。
↑この二つの違い　機密性
  GETは URLにデータが組み込まれるから閲覧履歴に残ってしまう。（POSTメッセージボディ内にデータを入れて送る）
  →ショッピングサイトのような会員制サイトなどは機密性守る為POST、ブラウザにURL文字数制限ある場合もあるから大量なデータ送信もPOST

「PUT」「DELETE」メソッドはwebサイトの改竄ができてしまう為サーバー側で使用できなくしていたりする。

●「ステータスコード」　サーバーはブラウザからの要求（HTTPリクエスト）を、HTTPレスポンスで応答するが、その中にはHTTPリクエストに対するサーバー内での処理結果が含まれている。
それが「ステータスコード」404とかのこと。数字３桁で表される。
100番台：HTTPリクエストの処理中の通知
200:HTTPリクエストに対して正常に処理できたと通知
300:HTTPリクエストに対して転送処理などのブラウザ側での追加処理が必要であることの通知。
400:ブラウザのエラー。リクエストされたHTMLファイルなどがウェブサーバーに存在しない場合など。404Notfound
500:サーバーのエラー。サーバーの何らかのエラー、高負荷による鯖落ちなど

●HTTPリクエスト、HTTPレスポンスの深掘り「メッセージヘッダー」HTTPメッセージに関する詳細な情報を送信できる。→送信するとき
メッセージヘッダーは複数の
「ヘッダーフィールド」と呼ばれる行で成り立つ　　　書き方→フィールド名：　フィールド値（中身）情報の種類で以下４つに分けられる。
・一般ヘッダーフィールド　日付表す  「Date」
・リクエストヘッダーフィールド      ●HTTPリクエストのみに含まれるヘッダーフィールド。例えばwebブラウザの固有情報を含む「User-agent」。
                         サーバーはこれを参照してスマホからの接続であればスマホ向けのサイトを表示といったクライアント（ブラウザ）ごとに異なる処理行える。
・レスポンスヘッダーフィールド     ●HTTPレスポンスのみ含まれる。サーバー機能を提供するプロダクト情報を示す「server」詳細表すと攻撃対象になる為示す情報制限することもできる。
・エンティティヘッダーフィールド    HTTPリクエスト、HTTPレスポンス両方に含まれる
