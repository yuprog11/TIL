続き

HTTPは種類があって0.9、1.0、１.1、2がある。（バージョン？）1.1が最も普及し、多く利用されている。
HTTP１.0以前はHTTPリクエスト送るたびにTCPにおけるコネクションを確立して、サーバーがHTTPレスポンスでデータを引き渡した段階でコネクションを閉じる
    →画像がたくさんあると、まずコネクション確立して、webページ受け取った後コネクション閉じて、画像を開くた目に再度コネクションを開く必要があった。画像たくさんあるとこのやり方では効率悪い、無駄な通信も発生。
    　　だからHTTP１.1以降ではコネクションを継続して利用、●HTTPキープアライブという。
      
●HTTPパイプライン　1こリクエスト送ってそれに対するレスポンスを受け取らないと次のリクエスト送れないが、これはレスポンス待つことなく、複数のリクエストを送信することができる。

HTTP/2の改良点
●ストリーム  それぞれのくうかんそれぞれのリクエスト、レスポンスを送れる
          →HTTP1.1でリクエストレスポンス1個ずつしか送れない問題をパイプライン機能で解決したが、パイプラインはリクエストの順番通りにレスポンス返さないといけないという制約がある。
　　　　　　　　　　　　　　　　　　　　　→一個のリクエストに時間かかる場合待つ必要があり、表示に時間がかかってしまう。そこでストリーム
テキスト形式でやりとりしていたが、●バイナリ形式（テキストデータ以外のデータ0.1とか）フォーマットに変更
          →1.1でバイナリ形式使うとテキストに一旦変換していた→変換処理時間、ブラウザ、サーバーの負担を軽減
ヘッダー情報圧縮　HPACKという圧縮方法で重複データの差分を送れるので、データ転送量削減
サーバープッシュ　　　HTTPリクエストでHTMLファイルを送ったとき画像が生み込まれていたとき、ブラウザからHTTPリクエスト受け取らなくても事前に画像データ送る。（これ必要だろうから送る的な）


HTTPS SSL,TLSを使い暗号化

盗聴防止（暗号化通信）、改ざん防止（メッセージダイジェスト）、なりすまし防止（webサイト運用元の確認）→これらのやり方は？
                    →あるデータから一位の短いデータ（ハッシュ値）を取り出す計算のこと。データ送受信時ハッシュ値比較する
                                               →サーバーに「SSLサーバー証明書」と呼ばれる電子証明書を配置しておき、接続時に検証。SSL証明書は発行を認められた「認証局による認証作業を通過しないといけない。そうでない場合はブラウザに警告が表示される。

●HTTPS通信する為の4つのフェーズ
    暗号化方式の決定  ブラウザとサーバー両方が利用可能な暗号化方式を決める。
    通信相手の証明    SSLサーバ証明書で大丈夫なのか確認。
    鍵の交換        　●鍵はデータを転送する際の暗号化、復元する　
    暗号化方式の確認　　　　　最終確認作業。
           ●これらのやりとりを「SSL/TLSハンドシェイク」 と呼ぶ。SSL/TLSによって実現されるから。

HTTPの特徴としてステートレスということが挙げられる。状態を保持しない。→多数のクライアントからの接続が発生するwebシステムで利用されるHTTPはこの方法がいい多くの処理を素早く処理する為

cookie　サーバーが接続してきたブラウザに対してコンテンツと一緒にcookieとして送る。
　　　　　　　　　　　　　　●送り方  
              サーバー  HTTPレスポンスに「Set-Cookie」ヘッダーを含めることでcookie送信できる
              ブラウザ  HTTPリクエストに「Cookie」ヘッダーを含めることで送信できる。
セッションcookie 有効期限が設定されていないcookieブラウザが閉じられると同時に削除。
有効期限が設定されたcookie  ゆう宇高期限が来るまでブラウザ上に残り続ける。

ブラウザとサーバーの必要な一連のやり取り「セッション」
ブラウザを認識するための情報「セッションID」cookieでやりとりする
